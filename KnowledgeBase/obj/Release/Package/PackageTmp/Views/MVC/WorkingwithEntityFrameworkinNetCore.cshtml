
@{
    ViewBag.Title = "WorkingwithEntityFrameworkinNetCore";
}

<h2>Working with Entity Framework in .Net Core</h2>

<div id="metadata" cmpgrp="page info">
<a href="https://github.com/guntidheerajkumar" class="avatar" title="Dheeraj Kumar Gunti">
    <span class="author-name" style="background-image: url('../../Images/avatar.png')" alt="Author Name"></span>
</a>
<div class="info">
    <span class="name"><a href="https://github.com/guntidheerajkumar">Dheeraj Kumar Gunti</a></span>
    <div class="meta">
        <p>Reading Time : <span class="eta"></span> (<span class="words"></span> words)</p>
    </div>
</div>
</div>
<article>
    <p>Hello All, Welcome back to Knowledge Base. </p>
    <p>Today we will learn how to work with Entity framework in .NET Core Application.</p>
    <p>Lets get started by creating the application. As the same process we need to create a new project and choose web application and select ASP.NET Web Application (.NET Core).</p>
    <p>If you don't have .NET Core installed in your visual studio. Download it from here <a href="https://www.microsoft.com/net/core#windows" target="_blank">.NET Core</a> </p>
    <p>Once the project creation is done. Now we need to create models in our project. For this sample we will be creating a <b>Person</b> model.</p>
    <script src="https://gist.github.com/guntidheerajkumar/c00ead942fdee046654208f6eed2dc8d.js"></script>
    <p>After creating model, we will start dealing with creating a DbContext. </p>
    <p>What is a DbContext?</p>
    <p>The primary class that is responsible for interacting with data as objects is System.Data.Entity.DbContext (often referred to as context). The context class manages the entity objects during run time, which includes populating objects with data from a database, change tracking, and persisting data to the database.  </p>
    <script src="https://gist.github.com/guntidheerajkumar/04baf0e02f3f485f2f186650536c54a3.js"></script>
    <p>Now we need to configure the application to work with EntityFramework and use SqlServer as our database. And also we need to Add out DbContext to that. Prior to that we need to specify a connection string which maps to a database server.</p>
    <p>Open <b>appsettings.json</b>, add the below connection string. You can change the connection string according to your project.</p>
    <script src="https://gist.github.com/guntidheerajkumar/c928f96b29d0f101f1707c54c04a3ea6.js"></script>
    <p>In the above snippet we are grouping the connection strings in one key, "Data". When ever we need to access connection string we will be using this key to access the connection string. For example if I want to retrieve the SampleConnection connection string then I need to write <b>Data:SampleConnection</b></p>
    <p>Now we will configure our services. Open the Startup.cs file and in the ConfigureServices method add the below code.</p>
    <script src="https://gist.github.com/guntidheerajkumar/d0990341508e06034b3f39cc9d0c22aa.js"></script>
    <p>We need to inclue some packages to our project which helps in running dotnet commands. We need to write them in project.json.</p>
    <script src="https://gist.github.com/guntidheerajkumar/2a1717168c34fc0f351e1946eaa16be0.js"></script>
    <p>Once you save the file you can observe in the solution explorer that the packages are restoring in to our solution. </p>
    <p>Now we will add some logic in our controller to access the entity data.</p>
    <script src="https://gist.github.com/guntidheerajkumar/bdb33654318229cd8dbc0343293ed47c.js"></script>
    <p>Once all the process is done. Now we need to create migrations for our project to create database. Go to Command Prompt and navigate to the project and there we will execute dotnet commands. Or Right click on the project and Choose Command Line as shown below.</p>
    <img src="~/Images/EFCore/CommandLine.png" class="img-responsive" />
    <br />
    <p>To Create migrations run the below commands.</p>
    <p><b><i>> dotnet ef migrations add InitialDBCreate</i></b></p>
    <img src="~/Images/EFCore/Migrations.PNG"  class="img-responsive" />
    <br />
    <p>We can able to see the migrations created in our project. Now we need to update the database using this migration. Run the below commands which updates the database.</p>
    <p><b><i>> dotnet ef database update</i></b></p>
    <p>Now run the application and put a break point at home controller where we have written code for fetching person data. You see we get data count as 0. You can have some seed data that can be populated when we run the application for the first time.</p>
    <p>Hope this sample helps in starting working with Entity framework in .NET Core application. </p>
    <p>Following is the sample code. </p>
    <p><b><a href="https://github.com/guntidheerajkumar/MVCEFNetCore/archive/master.zip" target="_blank">Download Sample</a></b></p>
    <br />
    <br />
    <br />
    <p>Happy Coding....</p>
</article>
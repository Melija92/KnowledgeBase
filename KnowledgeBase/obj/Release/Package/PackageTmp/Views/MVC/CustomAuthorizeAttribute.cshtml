
@{
    ViewBag.Title = "CustomAuthorizeAttribute";
}

<h1>Working with Custom Authorize Attribute in MVC</h1>
<div id="metadata" cmpgrp="page info">
    <a href="https://github.com/guntidheerajkumar" class="avatar" title="Dheeraj Kumar Gunti">
        <span class="author-name" style="background-image: url('../../Images/avatar.png')" alt="Author Name"></span>
    </a>
    <div class="info">
        <span class="name"><a href="https://github.com/guntidheerajkumar">Dheeraj Kumar Gunti</a></span>
        <div class="meta">
            <p>Reading Time : <span class="eta"></span> (<span class="words"></span> words)</p>
        </div>
    </div>
</div>
<article>
    <br />
    <p>
        Extending Authorize attribute will allow you to create a nice scope of accessibility in application.
        For example if I need to restrict users to create an employee, I can restrict using custom filters and authorize attribute.
        Following is the small example of how we can achieve this.
    </p>

    <p>
        AuthorizeAttribute class is inherited from IAuthorizeAttribute and FilterAttribue which has certain methods and properties which can be
        extended to achieve custom results.
    </p>

    <p>There are few methods which will be useful and which should be overridden for achieving this functionality.</p>

    <p>
        <b>AuthorizeCore</b> - This method is the entry point of authorization. Here you can check whether the user is authorized or not. and can even
        apply custom logic.
    </p>
    <p><b>HandleUnauthorizedRequest</b> - This method is used to redirect the request if unauthorized to a different page.</p>

    <p>Following is a small example:</p>

<pre><span style='color:#800000; font-weight:bold; '>public</span> <span style='color:#800000; font-weight:bold; '>class</span> CustomAuthorizeAttribute <span style='color:#808030; '>:</span> AuthorizeAttribute
<span style='color:#800080; '>{</span>
<span style='color:#800080; '>}</span>
</pre>

    <p>Here I have created a custom class named: CustomAuthorizeAttribute, which is inheriting from AuthorizeAttribute.</p>
    <p>
        I am creating a privileges list which holds some temp privileges. Here in this scenario you can get the privileges from other source if
        you have different functionality. Like getting data from Database or some collection.
    </p>

<pre><span style='color:#800000; font-weight:bold; '>string</span><span style='color:#808030; '>[</span><span style='color:#808030; '>]</span> customPriveleges <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>new</span> <span style='color:#800000; font-weight:bold; '>string</span><span style='color:#808030; '>[</span><span style='color:#808030; '>]</span> <span style='color:#800080; '>{</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>Create</span><span style='color:#800000; '>"</span><span style='color:#808030; '>,</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>Read</span><span style='color:#800000; '>"</span> <span style='color:#800080; '>}</span><span style='color:#800080; '>;</span>
</pre>

    <p>I am overriding AuthorizeCode method and extending that to accomplish a custom logic to check whether the logged in user has authorized to access or not.</p>

<pre><span style='color:#800000; font-weight:bold; '>public</span> <span style='color:#800000; font-weight:bold; '>string</span> AccessPermission <span style='color:#800080; '>{</span> <span style='color:#800000; font-weight:bold; '>get</span><span style='color:#800080; '>;</span> <span style='color:#800000; font-weight:bold; '>set</span><span style='color:#800080; '>;</span> <span style='color:#800080; '>}</span>
<span style='color:#800000; font-weight:bold; '>protected</span> <span style='color:#800000; font-weight:bold; '>override</span> <span style='color:#800000; font-weight:bold; '>bool</span> AuthorizeCore<span style='color:#808030; '>(</span>HttpContextBase httpContext<span style='color:#808030; '>)</span>
<span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>var</span> isAuthorized <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>base</span><span style='color:#808030; '>.</span>AuthorizeCore<span style='color:#808030; '>(</span>httpContext<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>!</span>isAuthorized<span style='color:#808030; '>)</span>
    <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>return</span> <span style='color:#800000; font-weight:bold; '>false</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
    <span style='color:#800000; font-weight:bold; '>int</span> pos <span style='color:#808030; '>=</span> Array<span style='color:#808030; '>.</span>IndexOf<span style='color:#808030; '>(</span>customPriveleges<span style='color:#808030; '>,</span> <span style='color:#800000; font-weight:bold; '>this</span><span style='color:#808030; '>.</span>AccessPermission<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>pos <span style='color:#808030; '>></span> <span style='color:#808030; '>-</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
    <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>return</span> <span style='color:#800000; font-weight:bold; '>true</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
    <span style='color:#800000; font-weight:bold; '>else</span>
    <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>return</span> <span style='color:#800000; font-weight:bold; '>false</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
<span style='color:#800080; '>}</span>
</pre>

    <p>In the above code, Initially I am checking whether the user is authorized or not. If not it will redirect to Custom Error Page. </p>

    <p>
        The Initial Authorization is to check whether user is authenticated or not, Once authentication is done then the next step which identifies
        whether he is authorized to access this page or not. Based on the privileges that we defined it validates. If he is not authorized then request will
        be redirected to custom error page.
    </p>

    <p>here is how we specify the authorization attribute.</p>

<pre><span style='color:#808030; '>[</span>CustomAuthorize<span style='color:#808030; '>(</span>AccessPermission <span style='color:#808030; '>=</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>Create</span><span style='color:#800000; '>"</span><span style='color:#808030; '>)</span><span style='color:#808030; '>]</span>
<span style='color:#800000; font-weight:bold; '>public</span> ActionResult Index<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>return</span> View<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>

    <p>We override one more method which handles the redirection of request to custom error page.</p>

<pre><span style='color:#800000; font-weight:bold; '>protected</span> <span style='color:#800000; font-weight:bold; '>override</span> <span style='color:#800000; font-weight:bold; '>void</span> HandleUnauthorizedRequest<span style='color:#808030; '>(</span>AuthorizationContext filterContext<span style='color:#808030; '>)</span>
<span style='color:#800080; '>{</span>
    filterContext<span style='color:#808030; '>.</span>Result <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>new</span> RedirectToRouteResult<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>new</span> RouteValueDictionary<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>new</span> <span style='color:#800080; '>{</span> action <span style='color:#808030; '>=</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>Index</span><span style='color:#800000; '>"</span><span style='color:#808030; '>,</span> controller <span style='color:#808030; '>=</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>Error</span><span style='color:#800000; '>"</span> <span style='color:#800080; '>}</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>

    <p>In the above method, when unauthorized it will be redirected to Index Action in Error Controller.</p>

    </article>
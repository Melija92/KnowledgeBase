@{
    ViewBag.Title = "Brief about Design Patterns";
}

<h1>Brief about Design Patterns</h1>
<div id="metadata" cmpgrp="page info">
    <a href="https://github.com/guntidheerajkumar" class="avatar" title="Dheeraj Kumar Gunti">
        <span class="author-name" style="background-image: url('../../Images/avatar.png')" alt="Author Name"></span>
    </a>
    <div class="info">
        <span class="name"><a href="https://github.com/guntidheerajkumar">Dheeraj Kumar Gunti</a></span>
        <div class="meta">
            <p>Reading Time : <span class="eta"></span> (<span class="words"></span> words)</p>
        </div>
    </div>
</div>
<article>
    <p>
        Design Pattern is a re-usable, high quality solution to a given requirement, task or recurring problem. Further, it does not comprise of a complete solution that may be instantly converted to a code component, rather it provides a framework for how to solve a problem. Design Patterns are in a continuous phase of evolution, which means that they keep on getting better & better as they are tested against time, reliability and subjected to continuous improvements.
        <br />Design Patterns are categorized into 3 types:
        <br />
        <ul>
            <li>    Creational Patterns</li>
            <li>Structural Patterns</li>
            <li>Behavioral Patterns</li>
        </ul>
        <br />
        <b>Creational Patterns:</b> These patterns specify how objects are created and utilized in an application. They tackle the aspects of when and how objects are created, keeping in mind whats the best way these objects should be created.
        <br />
        Listed below are some of the commonly known Creational Design Patterns:
        <br />
        <br />
        <ul>
            <li>
                Abstract Factory Pattern
            </li>
            <li> Factory Pattern</li>
            <li> Builder Pattern</li>
            <li>  Lazy Pattern</li>
            <li>  Prototype Pattern</li>
            <li>  Singleton Pattern</li>
        </ul>
        <br />
        In an abstract factory design, a framework is provided for creating sub-components that inherit from a common component. In .NET, this is achieved by creating classes that implement a common interface or a set of interfaces, where the interface comprises of the generic method declarations that are passed on to the sub-components.
        <br />
        Note that the term “Factory” refers to the location in the code where the code is created.
        <br />
        <br />
        A Factory Pattern is again an Object creation pattern. Here objects are created without knowing the class of the object. Actually this means that the object is created by a method of the class, and not by the class’s constructor. So basically the Factory Pattern is used wherever sub classes are given the priviledge of instantiating a method that can create an object.
        <br />
        <br />
        In a builder design pattern, an object creation process is separated from the object design construct. This is useful because the same method that deals with construction of the object, can be used to construct different design constructs.
        <br />
        <br />
        The approach of the Lazy Design Pattern is not to create objects until a specific requirement matches, and when it matches, object creation is triggered. A simple example of this pattern is a Job Portal application. Say you register yourself in that site thus filling up the registration table, only when the registration table is filled, the other objects are created and invoked, that prompt you to fill in other details too, which will be saved in other tables.
        <br />
        <br />
        A prototype design pattern relies on creation of clones rather than objects. Here, we avoid using the keyword ‘new’ to prevent overheads.
        <br />
        <br />
        The Singleton design pattern is based on the concept of restricting the instantiation of a class to one object. Say one object needs to perform the role of a coordinator between various instances of the application that depend on a common object, we may design an application using a Singleton. A singleton class may be used to instantiate an object of it, only if that object does not already exist. In case the object exists, a reference to the existing object is given. A singleton object has one global point of access to it.
        <br />
        <br />
        <b>Structural Patterns:</b> A structural design pattern establishes a relationship between entities. Thus making it easier for different components of an application to interact with each other. Following are some of the commonly known structural patterns:<br /><br />
        <b>
            Adapter Pattern
        </b> – Interfaces of classes vary depending on the requirement.
        <br />
        <b>
            Bridge Pattern
        </b> – Class level abstraction is separated from its implementation.<br />
        <b>
            Composite Pattern
        </b> – Individual objects & a group of objects are treated similarly in this approach.<br />
        <b>
            Decorator Pattern
        </b> – Functionality is assigned to an object.<br />
        <b>
            Facade Pattern
        </b> – A common interface is created for a group of interfaces sharing a similarity.<br />
        <b>
            Flyweight Pattern
        </b> – The concept of sharing a group of small sized objects.<br />
        <b>
            Proxy Pattern
        </b> – When an object is complex and needs to be shared, its copies are made. These copies are called the proxy objects.<br /><br />
        <b>
            Behavioral Patterns:
        </b> Behavioral design patterns focus on improving the communication between different objects. Following are different types of behavioral patterns:<br />
        <br />
        <b>
            Chain Or Responsibilities Pattern
        </b>– In this pattern, objects communicate with each other depending on logical decisions made by a class.<br />

        <b>
            Command Pattern
        </b>– In this pattern, objects encapsulate methods and the parameters passed to them.<br />

        <b>    Observer Pattern </b>– Objects are created depending on an events results, for which there are event handlers created<br />
    </p>
    </article>
@{
    ViewBag.Title = "ASP.NET Routing";
}

<h1>ASP.NET Routing</h1>
<div id="metadata" cmpgrp="page info">
    <a href="https://github.com/guntidheerajkumar" class="avatar" title="Dheeraj Kumar Gunti">
        <span class="author-name" style="background-image: url(https://github.com/guntidheerajkumar.png)" alt="Author Name"></span>
    </a>
    <div class="info">
        <span class="name"><a href="https://github.com/guntidheerajkumar">Dheeraj Kumar Gunti</a></span>
        <div class="meta">
            <p>Reading Time : <span class="eta"></span> (<span class="words"></span> words)</p>
        </div>
    </div>
</div>
<article>
    <p>
        ASP.NET routing enables you to use URLs that do not have to map to specific files in a Web site. Because the URL does not have to map to a file, you can use URLs that are descriptive of the user's action and therefore are more easily understood by users.
        <br />
        <br />
        Routing is fundamentally about decomposing a URL endpoint into parameters and then using those parameters to steer the HTTP request processing to a specific component. Let's take the URL /recipe/5 as an example. With the proper routing configuration, you can still respond to this URL with the Web Form RecipeDisplay.aspx.
        <br />
        <br />

        A route is a URL pattern that is mapped to a handler. The handler can be a physical file, such as an .aspx file in a Web Forms application. A handler can also be a class that processes the request, such as a controller in an MVC application. To define a route, you create an instance of the Route class by specifying the URL pattern, the handler, and optionally a name for the route.
        <br />
        <br />

        The URL no longer represents a physical path. Instead, the word recipe represents a parameter that the routing engine can use to locate a component for processing recipe requests. The number 5 represents a second parameter that you'll need during processing to display a specific recipe. Instead of encoding database keys into the URL, a better idea might be to use a URL like /recipe/tacos.
        <br />

    </p>
    <br />
    <img src="~/Images/routing_1.gif" class="img-responsive" />
    <br /><br />

    <p>
        In an ASP.NET application that does not use routing, an incoming request for a URL typically maps to a physical file that handles the request, such as an .aspx file. For example, a request for http://server/application/Products.aspx?id=4 maps to a file that is named Products.aspx that contains code and markup for rendering a response to the browser. The Web page uses the query string value of id=4 to determine what type of content to display. System.Web.Routing namespace represents a route during run time and describes the route's parameters and constraints. A route handler inherits from the System.Web.Routing.IRouteHandler interface. This interface requires the route handler to implement a GetHttpHandler method that returns an object implementing the IHttpHandler interface. The IHttpHandler interface has been a part of ASP.NET since the beginning, and a Web Form (a System.Web.UI.Page) is an IHttpHandler. When using routing with Web Forms, your route handlers need to locate, instantiate, and return the proper Web Form. Finally, the routing module plugs into the ASP.NET processing pipeline. The module will intercept incoming requests, examine the URL, and discover if there are any matching routes defined. The module will retrieve the associated route handler for a matching route and ask the routing handler for the IHttpHandler that will process the request.
        <br />
        <br />
        <b>Configuring Routing:</b>
        <br />

        To configure an ASP.NET Web site or Web application for routing, you first need to add a reference to the System.Web.Routing assembly. You'll also need to configure the routing module into the ASP.NET pipeline. The routing module is a standard HTTP module. For IIS 6.0 and earlier and for the Visual Studio Web development server, you install the module using the section of web.config.
        <br />
    </p>
    <img src="~/Images/routing_2.png" class="img-responsive" />
    <br />
    <br />
    <p>
        <b>Configuring Routes:</b><br />
        Routes and route handlers go hand in hand, but I'll look at the code to configure routes first. The routing engine's RouteTable class exposes a RouteCollection via its static Routes property. You need to configure all of your custom routes into this collection before the application begins to execute the first request, which means you need to use a global.asax file and the Application_Start event.
        <br />
    </p>

    <script src="https://gist.github.com/guntidheerajkumar/6ee465d9a2ced713bfe6e4d094415acb.js"></script>
    <p>
        - Creating custom route handler which is implemented from IRouteHandler interface.<br />
        - GetHttphandler is the method which is used to process the request which intern returns a object.
        <br />
    </p>
    <script src="https://gist.github.com/guntidheerajkumar/d5a52111c9f86ca5d7891065f23eb8f1.js"></script>
    <p>CreateInstancefromvirtualpath method processes a file, given its virtual path, and creates an instance of the result. Code for generating the automatically generated urls</p>
    <script src="https://gist.github.com/guntidheerajkumar/59d7f9195eb02e9d056e6277960bbce7.js"></script>
    <p>This code creates an instance of the RouteValueDictionary class that contains three parameters.</p>
    <script src="https://gist.github.com/guntidheerajkumar/bed0960e37dede785bed8ddcc96c8888.js"></script>
    <p>Virtual Path Data represents information about the route and virtual path that are the result of generating a URL with the ASP.NET routing framework. This code instantiates a VirtualPathData object by calling the GetVirtualPath method of the RouteCollection class.</p>
    <script src="https://gist.github.com/guntidheerajkumar/b3a42ae975e4e481cf8f093ffc0a4996.js"></script>

    <p>
        <b>ASP.NET URL Rewriting Vs Routing</b>
        <br />
        ASP.NET routing differs from URL rewriting. URL rewriting processes incoming requests by actually changing the URL before it sends the request to the Web page. For example, an application that uses URL rewriting might change a URL from /Products/Widgets/ to /Products.aspx?id=4. Also, URL rewriting typically does not have an API for creating URLs that are based on your patterns. In URL rewriting, if you change a URL pattern, you must manually update all hyperlinks that contain the original URL. With ASP.NET routing, the URL is not changed when an incoming request is handled, because routing can extract values from the URL. When you have to create a URL, you pass parameter values into a method that generates the URL for you. To change the URL pattern, you change it in one location, and all the links that you create in the application that are based on that pattern will automatically use the new pattern.
    </p>
    <br />
    <a href="https://github.com/guntidheerajkumar/ExampleRouting" class="btn btn-danger"> Sample</a>
</article>
@{
    ViewBag.Title = "Windows Communication Foundation";
}

<h1>Windows Communication Foundation</h1>
<div id="metadata" cmpgrp="page info">
    <a href="https://github.com/guntidheerajkumar" class="avatar" title="Dheeraj Kumar Gunti">
        <span class="author-name" style="background-image: url(https://github.com/guntidheerajkumar.png)" alt="Author Name"></span>
    </a>
    <div class="info">
        <span class="name"><a href="https://github.com/guntidheerajkumar">Dheeraj Kumar Gunti</a></span>
        <div class="meta">
            <p>Reading Time : <span class="eta"></span> (<span class="words"></span> words)</p>
        </div>
    </div>
</div>
<article>
    <p>
        <span class="firstcharacter">W</span>indows Communication Foundation (Code named Indigo) is a programming platform and runtime system for building, configuring and deploying network-distributed services. It is the latest service oriented technology; Interoperability is the fundamental characteristics of WCF. It is unified programming model provided in .Net Framework 3.0. WCF is a combined features of Web Service, Remoting, MSMQ and COM+. WCF provides a common platform for all .NET communication.
        <br />
        <br />
        WCF is meant for designing and deploying distributed applications under service-oriented architecture (SOA) implementation. Services are loosely coupled to each other. Services typically have a WSDL interface (Web Services Description Language) that any WCF client can use to consume the service, regardless of which platform the service is hosted on. WCF implements many advanced Web services (WS) standards such as WS-Addressing, WS-ReliableMessaging and WS-Security.
    </p>
    <b>WCF Architecture:</b>
    <br />
    <br />
    <img src="~/Images/WCF.jpg" class="img-responsive" />
    <br />
    <br />
    <p>
        <b>Features of WCF:</b>
        <br />
        WCF includes the following set of features.<br />
        <b>
            Service Orientation :
        </b> One consequence of using WS standards is that WCF enables you to create service oriented applications. Service-oriented architecture (SOA) is the reliance on Web services to send and receive data. The services have the general advantage of being loosely-coupled instead of hard-coded from one application to another. A loosely-coupled relationship implies that any client created on any platform can connect to any service as long as the essential contracts are met.
        <br />
        <br />
        <b>
            Interoperability :
        </b> WCF implements modern industry standards for Web service interoperability.
        <br />
        <br />
        <b>
            Multiple Message Patterns :
        </b> Messages are exchanged in one of several patterns. The most common pattern is the request/reply pattern, where one endpoint requests data from a second endpoint. The second endpoint replies. There are other patterns such as a one-way message in which a single endpoint sends a message without any expectation of a reply. A more complex pattern is the duplex exchange pattern where two endpoints establish a connection and send data back and forth, similar to an instant messaging program. For more information about how to implement different message exchange patterns using WCF.
        <br />
        <br />
        <b>
            Service Metadata :
        </b> WCF supports publishing service metadata using formats specified in industry standards such as WSDL, XML Schema and WS-Policy. This metadata can be used to automatically generate and configure clients for accessing WCF services. Metadata can be published over HTTP and HTTPS or using the Web Service Metadata Exchange standard.
        <br />
        <br />
        <b>
            Data Contracts :
        </b> Because WCF is built using the .NET Framework, it also includes code-friendly methods of supplying the contracts you want to enforce. One of the universal types of contracts is the data contract. In essence, as you code your service using Visual C# or Visual Basic, the easiest way to handle data is by creating classes that represent a data entity with properties that belong to the data entity. WCF includes a comprehensive system for working with data in this easy manner. Once you have created the classes that represent data, your service automatically generates the metadata that allows clients to comply with the data types you have designed.
        <br />
        <br />
        <b>
            Security :
        </b> Messages can be encrypted to protect privacy and you can require users to authenticate themselves before being allowed to receive messages. Security can be implemented using well-known standards such as SSL or WS-SecureConversation.
        <br />
        <br />
        <b>
            Multiple Transports and Encodings :
        </b> Messages can be sent on any of several built-in transport protocols and encodings. The most common protocol and encoding is to send text encoded SOAP messages using is the HyperText Transfer Protocol (HTTP) for use on the World Wide Web. Alternatively, WCF allows you to send messages over TCP, named pipes, or MSMQ. These messages can be encoded as text or using an optimized binary format. Binary data can be sent efficiently using the MTOM standard. If none of the provided transports or encodings suit your needs you can create your own custom transport or encoding.
        <br />
        <br />
        <b>
            Reliable and Queued Messages :
        </b> WCF supports reliable message exchange using reliable sessions implemented over WS-Reliable Messaging and using MSMQ.
        <br />
        <br />
        <b>
            Durable Messages :
        </b> A durable message is one that is never lost due to a disruption in the communication. The messages in a durable message pattern are always saved to a database. If a disruption occurs, the database allows you to resume the message exchange when the connection is restored. You can also create a durable message using the Windows Workflow Foundation (WF).
        <br />
        <br />
        <b>
            Transactions :
        </b> WCF also supports transactions using one of three transaction models: WS-AtomicTtransactions, the APIs in the System.Transactions namespace, and Microsoft Distributed Transaction Coordinator.
        <br />
        <br />
        <b>
            AJAX and REST Support :
        </b> REST is an example of an evolving Web 2.0 technology. WCF can be configured to process “plain” XML data that is not wrapped in a SOAP envelope. WCF can also be extended to support specific XML formats, such as ATOM (a popular RSS standard), and even non-XML formats, such as JavaScript Object Notation (JSON).
        <br />
        <br />
        <b>
            Extensibility :
        </b> The WCF architecture has a number of extensibility points. If extra capability is required, there are a number of entry points that allow you to customize the behavior of a service.
        <br />
        <br />
    </p>
    <b>Types of Bindings:</b>
    <br />
    <br />
    <img src="~/Images/WCF_Bindings.jpg" class="img-responsive" />
    <br />
    <br />
    <p>
        <b>Endpoints</b>
        <br />
        A WCF client connects to a WCF service via an Endpoint. Each service exposes its contract via one or more endpoints. An endpoint has an address (which is a URL specifying where the endpoint can be accessed) and binding properties that specify how the data will be transferred. Interaction between WCF endpoint and client is done using a SOAP envelope. SOAP envelopes are in simple XML form that makes WCF platform independent.When a client wants to access the service via an endpoint, it not only needs to know the contract, but it also has to adhere to the binding specified by the endpoint. Thus, both client and server must have compatible endpoints.
        Behaviors
        <br />
        Behaviors are types that modify or extend service or client functionality. Behaviors allow the developer to create custom processing, transformation, or inspection that is applied to messages as they are sent or received. Some examples of uses for behaviors are:
        <br />
        <ul>
            <li>  Controlling whether metadata is published with a service</li>
            <li>Adding security features to a service, such as impersonation, authorization, or managing tokens</li>
            <li>Recording information about messages, such as tracking, tracing, or logging</li>
            <li>Message or parameter validation</li>
            <li>Invoking all additional operations when messages are received–such as notifying users when certain messages arrive</li>
            <li>Behaviors implement the IServiceBehavior interface for service extensions, the IEndpointBehavior for endpoints, the IContractBehavior interface for service contracts, or the IOperationBehavior for operations. Service behaviors are used for message processing across a service, rather than processing that would be specific to a single operation.</li>
        </ul>
        <br />
        <b>Contracts:</b>
        <br />
        The contract is a platform-neutral and standard way of describing what the service does. WCF defines four types of contracts:
        <br />
        <br />
        <b>
            Service contracts
        </b>
        <br />
        Describe which operations the client can perform on the service.
        <br />
        There are two types of Service Contracts.
        <br />
        ServiceContract – This attribute is used to define the Interface.
        <br />
        OperationContract – This attribute is used to define the method inside Interface.
        <br /><br />
        <b>Data contracts</b>
        <br />
        Define which data types are passed to and from the service. WCF defines implicit contracts for built-in types such as int and string, but we can easily define explicit opt-in data contracts for custom types.<br />
        There are two types of Data Contracts.<br />
        DataContract – attribute used to define the class<br />
        DataMember – attribute used to define the properties.<br />
        If DataMember attributes are not specified for a properties in the class, that property can’t be passed to-from web service.
        <br />
        <br />
        <b>Fault contracts</b><br />
        Define which errors are raised by the service, and how the service handles and propagates errors to its clients.
        <br />
        <br />
        <b>Message contracts</b><br />
        Allow the service to interact directly with messages. Message contracts can be typed or untyped, and are useful in interoperability casxes and when there is an existing message format we have to comply with.
        <br />
        <br />
        <b>Activation and Hosting</b>
        <br />
        Services can be hosted or executed, so that it will be available to everyone accessing from the client. WCF service can be hosted by following mechanism
        <ul>
            <li>
                IIS
            </li>
            <li>    Internet information Service provides number of advantages if a Service uses Http as protocol. It does not require Host code to activate the service, it automatically activates service code.</li>
            <li>Windows Activation Service</li>
            <li> (WAS) is the new process activation mechanism that ships with IIS 7.0. In addition to HTTP based communication, WCF can also use WAS to provide message-based activation over other protocols, such as TCP and named pipes.</li>
            <li> Self-Hosting</li>
            <li> WCF service can be self hosted as console application, Win Forms or WPF application with graphical UI.</li>
            <li> Windows Service</li>
            <li> WCF can also be hosted as a Windows Service, so that it is under control of the Service Control Manager (SCM).</li>
        </ul>
    </p>
</article>
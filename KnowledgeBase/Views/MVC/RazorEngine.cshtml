
@{
    ViewBag.Title = "Razor Engine";
}

<h1>Razor Engine</h1>

<p>The new view-engine option we’ve been working on is optimized around HTML generation using a code-focused templating approach. The codename for this new view engine is “Razor”, and we’ll be shipping the first public beta of it shortly.</p>
<br />
<b>Design Goals</b> We had several design goals in mind as we prototyped and evaluated “Razor”:
<br />
<br />
Compact, Expressive, and Fluid: Razor minimizes the number of characters and keystrokes required in a file, and enables a fast, fluid coding workflow. Unlike most template syntaxes, you do not need to interrupt your coding to explicitly denote server blocks within your HTML. The parser is smart enough to infer this from your code. This enables a really compact and expressive syntax which is clean, fast and fun to type.
Easy to Learn: Razor is easy to learn and enables you to quickly be productive with a minimum of concepts. You use all your existing language and HTML skills.
Is not a new language: We consciously chose not to create a new imperative language with Razor. Instead we wanted to enable developers to use their existing C#/VB (or other) language skills with Razor, and deliver a template markup syntax that enables an awesome HTML construction workflow with your language of choice.
Works with any Text Editor: Razor doesn’t require a specific tool and enables you to be productive in any plain old text editor (notepad works great).
Has great Intellisense: While Razor has been designed to not require a specific tool or code editor, it will have awesome statement completion support within Visual Studio. We’ll be updating Visual Studio 2010 and Visual Web Developer 2010 to have full editor intellisense for it.
Unit Testable: The new view engine implementation will support the ability to unit test views (without requiring a controller or web-server, and can be hosted in any unit test project – no special app-domain required).
<br />
<br />

You denote the start of a code block with Razor using a &#64; character. Razor does not require you to explicitly close the code-block.
<br />
<br />

The Razor parser has semantic knowledge of C#/VB code used within code-blocks – which is why we didn’t need to explicitly close the code blocks above. Razor was able to identify the above statements as self-contained code blocks, and implicitly closed them for us.
<br />
<br />

Inside a code block, each complete code statement must end with a semicolon. Inline expressions don't end with a semicolon.
<br />
<br />

<b>Important Note:</b> In C#, keywords (like var, true, and if) and variable names are case sensitive.
<br />
<br />

Razor syntax is a simple programming syntax for embedding server-based code in a web page. In a web page that uses the Razor syntax, there are two kinds of content: client content and server code. Client content is the stuff you're used to in web pages: HTML markup (elements), style information such as CSS, client script such as JavaScript, and plain text.
<br />
<br />

Razor syntax lets you add server code to this client content. If there's server code in the page, the server runs that code first, before it sends the page to the browser. By running on the server, the code can perform tasks that can be a lot more complex to do using client content alone, like accessing server-based databases. Most importantly, server code can dynamically create client content — it can generate HTML markup or other content on the fly and then send it to the browser along with any static HTML that the page might contain. From the browser's perspective, client content that's generated by your server code is no different than any other client content. As you've already seen, the server code that's required is quite simple. ASP.NET web pages that include the Razor syntax have a special file extension (.cshtml or .vbhtml). The server recognizes these extensions, runs the code that's marked with Razor syntax, and then sends the page to the browser.
<br />
<br />

<b>HTML Encoding</b>
<br />
<br />

When you display content in a page using the &#64; character, as in the preceding examples, ASP.NET HTML-encodes the output. This replaces reserved HTML characters (such as < and > and &) with codes that enable the characters to be displayed as characters in a web page instead of being interpreted as HTML tags or entities. Without HTML encoding, the output from your server code might not display correctly, and could expose a page to security risks.
<br />
<br />

HTTP GET and POST Methods and the IsPost Property
<br />
<br />

The protocol used for web pages (HTTP) supports a very limited number of methods (verbs) that are used to make requests to the server. The two most common ones are GET, which is used to read a page, and POST, which is used to submit a page. In general, the first time a user requests a page, the page is requested using GET. If the user fills in a form and then clicks Submit, the browser makes a POST request to the server.
<br />
<br />
<b>Know more about Razor: </b>
<br />
<br />
<a href="http://www.google.co.in/url?sa=t&rct=j&q=razor%20tutorial&source=web&cd=3&sqi=2&ved=0CC0QFjAC&url=http%3A%2F%2Fwww.w3schools.com%2Frazor%2Fdefault.asp&ei=XWvOTte2Dor4rQetuNn5DA&usg=AFQjCNFHMmIGzw3slMc3Hw2yE5qRD72Giw&sig2=cx6fbuKSG5TzDs470EV1qw&cad=rja">Link 1</a><br />
<a href="http://www.google.co.in/url?sa=t&rct=j&q=razor%20tutorial&source=web&cd=1&sqi=2&ved=0CBwQFjAA&url=http%3A%2F%2Fwww.asp.net%2Fwebmatrix%2Ftutorials%2F2-introduction-to-asp-net-web-programming-using-the-razor-syntax&ei=XWvOTte2Dor4rQetuNn5DA&usg=AFQjCNFh_jOhOB6zLIw7FEsOtRtQt1O29Q&sig2=6fHdf05VGQ-qHx52QFchjw&cad=rja">Link 2</a>

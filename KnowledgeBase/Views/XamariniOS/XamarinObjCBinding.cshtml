
@{
    ViewBag.Title = "XamarinObjCBinding";
}

<h2>Working on Xamarin ObjC Binding</h2>

<div id="metadata" cmpgrp="page info">
    <a href="https://github.com/guntidheerajkumar" class="avatar" title="Dheeraj Kumar Gunti">
        <span class="author-name" style="background-image: url('../../Images/avatar.png')" alt="Author Name"></span>
    </a>
    <div class="info">
        <span class="name"><a href="https://github.com/guntidheerajkumar">Dheeraj Kumar Gunti</a></span>
        <div class="meta">
            <p>Reading Time : <span class="eta"></span> (<span class="words"></span> words)</p>
        </div>
    </div>
</div>
<article>
    <p>When developing on iOS application, we might need some sort of third party controls which may not be available in Xamarin. With respect to
    iOS app development Objective-C is the core language which is used to develop applications. Xamarin has provided us a way to 
    utilize Objective-C code and embed them in to our Xamarin iOS application. This concept of  integration is called as Binding. </p>
    <p>When working with Objective-C classes, we need to create a FAT binary which will be included in to a xamarin binding project which will act as the interceptor of dealing with the logic behind that Objective-C classes.</p>
    <p>In Order to create a Xamarin Binding Project, please follow the process shown below. </p>
    <p>For example sake we are taking one Objective-C project which we are now creating a binding inorder to use that in our application.</p>
    <img src="~/Images/ObjCBinding/1.png" width="650" height="450" class="img-responsive"/>
    <br />
    <p>Download or clone the above project.</p>
    <img src="~/Images/ObjCBinding/2.png" width="650" height="450" class="img-responsive"/>
    <br />
    <p>Open the application in XCode and run the application inorder to see the output. </p>
    <img src="~/Images/ObjCBinding/3.png" width="650" height="450" class="img-responsive"/>
    <br />
    <p>Now we will use the project to create FAT binary. For that we will create a new project. Create new Cocoa Touch Static Library and Choose the name you want.</p>
    <img src="~/Images/ObjCBinding/4.png" width="650" height="450" class="img-responsive"/>
    <br />
    <p>For this example I am naming it as CircleMenu</p>
    <img src="~/Images/ObjCBinding/5.png"  width="650" height="450" class="img-responsive"/>
    <br />
    <img src="~/Images/ObjCBinding/6.png"  width="350" height="450" class="img-responsive"/>
    <br />
    <p>Remove the classes generated by default.</p>
    <img src="~/Images/ObjCBinding/7.png"  width="350" height="450" class="img-responsive"/>
    <br />
    <p>Right click on the Project and choose Add Files. Select the classes from the downloaded project and include them in to our project</p>
    <img src="~/Images/ObjCBinding/8.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>Now we have included the classes in to our project.</p>
    <img src="~/Images/ObjCBinding/9.png" width="350" height="450" class="img-responsive" />
    <br />
    <p>Click on the Project and You see the below details. Resource Tags, Build Settings, Build Phases, Build Rules. This is the place where we can change the project related and build related settings.</p>
    <img src="~/Images/ObjCBinding/10.png" width="650" height="450" class="img-responsive"  />
    <br />
    <p>When we are building an iOS application, it should support simulator and the real device. That means we need to support multiple architectures. ARM64, ARMv7, ARMv7S architectures which support real devices. i386 is meant for Simulator.</p>
    <p>We need to alter and add the respective architectures on which we need to build the application. Add all those.</p>
    <img src="~/Images/ObjCBinding/11.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>As the application should run on the chosen architecture, we need to change the default selection from Yes to No. We are not building on Active archiecture.</p>
    <img src="~/Images/ObjCBinding/12.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>When we build the application, respective binaries are stored in machine default location. We need to change that to project location. So that it will be easy to manage the binaries. Go to File Menu and Choose Project Settings as below. </p>
    <img src="~/Images/ObjCBinding/13.png" width="350" height="450" class="img-responsive" />
    <br />
    <p>Choose Derived data to Project-Relative Location and click on Done.</p>
    <img src="~/Images/ObjCBinding/14.png" width="450" height="450" class="img-responsive" />
    <br />
    <p>Now we need to change the project scheme when building. Click on project dropdown and choose Edit Scheme. You can even create a new scheme or manage existing schemes from here.</p>
    <img src="~/Images/ObjCBinding/15.png" width="350" height="250" class="img-responsive" />
    <br />
    <p>Once we have selected Edit Scheme and you will see the below screen. Change the build configuration to release and click on Close.</p>
    <img src="~/Images/ObjCBinding/16.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>Now select Product and choose Build For Running. We need to repeat this step for simulator and generic device. Because we need to create FAT binary for both simulator and real device.</p>
    <img src="~/Images/ObjCBinding/17.png" width="650" height="450" class="img-responsive" />
    <br />
    <img src="~/Images/ObjCBinding/18.png"  width="650" height="450" class="img-responsive"  />
    <br />
    <p>Now open terminal and navigate to the project path as below. Project Location > Derived Data > Project > Build > Products</p>
    <img src="~/Images/ObjCBinding/19.png" width="650" height="250" class="img-responsive"  />
    <br />
    <img src="~/Images/ObjCBinding/20.png" width="650" height="350" class="img-responsive" />
    <br />
    <img src="~/Images/ObjCBinding/21.png" width="750" height="150" class="img-responsive" />
    <br />
    <p>Now you can see two directories Release-iphoneos and Release-iphonesimulator. </p>
    <img src="~/Images/ObjCBinding/22.png" width="450" height="250" class="img-responsive" />
    <br />
    <p>User LIPO command find the respective architecture. </p>
    <p><i><b>lipo -info Release-iphonesimulator/libCircleMenu.a</b></i></p>
    <img src="~/Images/ObjCBinding/23.png" width="750" height="250" class="img-responsive" />
    <br />
    <p><i><b>lipo -info Release-iphoneos/libCircleMenu.a</b></i></p>
    <img src="~/Images/ObjCBinding/24.png" width="750" height="450" class="img-responsive" />
    <br />
    <p>Now we need to combine these two binries and need to create one binary.</p>
    <p><i><b>lipo -create Release-iphonesimulator/libCircleMenu.a Release-iphoneos/libCircleMenu.a -output libCircleMenuUnified.a</b></i></p>
    <img src="~/Images/ObjCBinding/25.png" width="850" height="150" class="img-responsive" />
    <br />
    <p>Now you can see one binary file created on the same directory as below.</p>
    <img src="~/Images/ObjCBinding/26.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>Now open Xamarin Studio and create new Xamarin Binding Project as below. </p>
    <img src="~/Images/ObjCBinding/27.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>Specify the desired name. For this example I have used CircleMenu.</p>
    <img src="~/Images/ObjCBinding/28.png" width="450" height="350" class="img-responsive" />
    <br />
    <p>Now add the FAT Binary .a file in to our project by choosing Add Files.</p>
    <img src="~/Images/ObjCBinding/29.png" width="350" height="450" class="img-responsive" />
    <br />
    <img src="~/Images/ObjCBinding/30.png" width="450" height="450" class="img-responsive" />
    <br />
    <img src="~/Images/ObjCBinding/31.png" width="650" height="450" class="img-responsive" />
    <br />
    <p>Now we need to download Objective Sharpie, which is used to create binding classes. Download <a href="https://download.xamarin.com/objective-sharpie/ObjectiveSharpie.pkg" target="_blank">Objective Sharpie</a>. Once the installation is done.
    Go to terminal and use the below command to verify which sdks are available in our system.</p>
    <p><i><b>sharpie xcode -sdks</b></i></p>
    <p>You can see all the sdks available in the system.</p>
    <img src="~/Images/ObjCBinding/32.png" width="450" height="350" class="img-responsive" />
    <br />
    <p>Now run the sharpie command to create binding classes. </p>
    <p><i><b>sharpie bind -output=CircleMenu -namespace=CircleMenu "Provide the complete path of .h file" -sdk=iphoneos10.1</b></i></p>
    <p>On executing the command, tool will create ApiDefinitions.cs file. We need to include the contents of that file in to the ApiDefinitions.cs file which already exists in our Xamarin Binding Project. </p>
    <img src="~/Images/ObjCBinding/33.png" width="750" height="550" class="img-responsive" />
    <br />
    <p>ApiDefinitions.cs file looks like below.</p>
    <img src="~/Images/ObjCBinding/34.png" width="650" height="450" class="img-responsive"  />
    <br />
    <p>Build the application. If any error you notice then we need to resolve them one by one. Because Objective Sharpie doesn't guarentee you 100% conversion.</p>
    <p>If no errors then the build will be successfull. </p>
    <p>Few errors which you can blindly remove. </p>
    <ul>
        <li>Remove [Verify] attribute.</li>
        <li>Any duplicate code generated</li>
    </ul>
    <p>Once all the process is done. Now you are good to go to add this library to your application.</p>

    <br />
    <br />
    <p>Enjoy Coding.... Hope this given you a basic idea of how to create Obj-C bindings.</p>
</article>